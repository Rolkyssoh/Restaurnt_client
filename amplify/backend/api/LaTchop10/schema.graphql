type Bugs @model @auth(rules: [{allow: public}]) {
  id: ID!
  title: String!
  details: String!
  userID: ID @index(name: "byUser")
  courierID: ID @index(name: "byCourier")
  image: String
}

type AskedFeatures @model @auth(rules: [{allow: public}]) {
  id: ID!
  title: String!
  details: String!
  userID: ID @index(name: "byUser")
  courierID: ID @index(name: "byCourier")
}

enum TransportationModes {
  DRIVING
  BICYCLING
}

type Courier @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  address: String
  lat: Float!
  lng: Float!
  tranportationMode: TransportationModes!
  email: String
  Orders: [Order] @hasMany(indexName: "byCourier", fields: ["id"])
  isActive: Boolean
  sub: String!
  AskedFeatures: [AskedFeatures] @hasMany(indexName: "byCourier", fields: ["id"])
  Bugs: [Bugs] @hasMany(indexName: "byCourier", fields: ["id"])
}

type OrderDish @model @auth(rules: [{allow: public}]) {
  id: ID!
  quantity: Float!
  Dish: Dish @hasOne
  Ingredient: Ingredient @hasOne
  orderID: ID! @index(name: "byOrder")
}

enum OrderStatus {
  NEW
  COOKING
  READY_FOR_PICKUP
  PICKED_UP
  COMPLETED
  ACCEPTED
  DECLINED_BY_STRUCTURE
}

type Order @model @auth(rules: [{allow: public}]) {
  id: ID!
  status: OrderStatus!
  userID: ID! @index(name: "byUser")
  OrderDishes: [OrderDish] @hasMany(indexName: "byOrder", fields: ["id"])
  structureID: ID @index(name: "byStructure")
  courierID: ID @index(name: "byCourier")
}

enum UserType {
  CUSTOMER
  DRIVER
  ADMIN
  RESTORER
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  sub: String!
  name: String!
  address: String!
  lat: Float!
  lng: Float!
  type: UserType!
  Baskets: [Basket] @hasMany(indexName: "byUser", fields: ["id"])
  Orders: [Order] @hasMany(indexName: "byUser", fields: ["id"])
  email: String
  isActive: Boolean
  picture: String
  favouriteRestaurants: [ID]
  Bugs: [Bugs] @hasMany(indexName: "byUser", fields: ["id"])
  AskedFeatures: [AskedFeatures] @hasMany(indexName: "byUser", fields: ["id"])
}

type BasketDish @model @auth(rules: [{allow: public}]) {
  id: ID!
  quantity: Float!
  basketID: ID! @index(name: "byBasket")
  Dish: Dish @hasOne
  Ingredient: Ingredient @hasOne
}

type Basket @model @auth(rules: [{allow: public}]) {
  id: ID!
  structureID: ID! @index(name: "byStructure")
  BasketDishes: [BasketDish] @hasMany(indexName: "byBasket", fields: ["id"])
  userID: ID! @index(name: "byUser")
}

type Ingredient @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  image: String!
  description: String
  price: Float!
  structureID: ID! @index(name: "byStructure")
  image_url: String
}

type Dish @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  image: String!
  description: String
  price: Float!
  structureID: ID! @index(name: "byStructure")
  image_url: String
}

enum StructureType {
  RESTAURANT
  SHOP
}

type Structure @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  image: String!
  deliveryFee: Float!
  minDeliveryTime: Int!
  maxDeliveryTime: Int!
  rating: Float
  address: String!
  lat: Float!
  lng: Float!
  type: StructureType!
  adminSub: String
  isActive: Boolean!
  Dishes: [Dish] @hasMany(indexName: "byStructure", fields: ["id"])
  Ingredients: [Ingredient] @hasMany(indexName: "byStructure", fields: ["id"])
  Baskets: [Basket] @hasMany(indexName: "byStructure", fields: ["id"])
  Orders: [Order] @hasMany(indexName: "byStructure", fields: ["id"])
  image_url: String
}
 